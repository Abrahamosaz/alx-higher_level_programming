Doctest for the ``matrix_divided function``
=========================================

import the function
>>> matrix_divided = __import__("2-matrix_divided").matrix_divided
>>> len(__import__("2-matrix_divided").__doc__) > 1
True
>>> len(__import__("2-matrix_divided").matrix_divided.__doc__) > 1
True


Test case of function when approprate type is passed to the function
>>> matrix_divided([1,2,3,4], 4)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[1, 2, "osazee", 4]], 3)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers/floats


Test case of function when the list rows are not of the same length
>>> matrix_divided([
...	[1, 2, 3, 5],
...	[1, 3, 4],
... 	[1, 3],
...	], 2)
Traceback (most recent call last):
	...
TypeError: Each row of the matrix must have the same size
>>> matrix_divided([
...	[4, 5, 7],
...	[2, 3, 7, 8],
...	], 3)
Traceback (most recent call last):
	...
TypeError: Each row of the matrix must have the same size


Test case of the function when div value is not integer or float value
>>> matrix_divided([
...	[1, 2, 3],
...	[5, 7, 9]], 'c')
Traceback (most recent call last):
	...
TypeError: div must be a number
>>> matrix_divided([[2, 4], [1, 3]], "osazee")
Traceback (most recent call last):
	...
TypeError: div must be a number


Test case of the function when div value is quare to zero
>>> matrix_divided([[1, 2, 3], [14, 5, 6]], 0)
Traceback (most recent call last):
	...
ZeroDivisionError: division by zero


Test case for the result of the function
>>> print(matrix_divided([[1.163543, 2.254353], [2.543, 4.353]], 2))
[[0.58, 1.13], [1.27, 2.18]]
>>> new_list = matrix_divided([[1, 2], [3, 4]], 2)
>>> isinstance(new_list, list)
True
